<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build Chaibio shoftware</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Building machine</description>
          <defaultValue>10.0.2.240</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>bypass_julia</name>
          <description>Add julia to the build.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefex</name>
          <description>Download folder URL</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>low_performance</name>
          <description>Set cpu to lowest performance.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>123</authToken>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

echo Checking for nessasery packages:
sudo apt-get -y -q install sshpass parted mdadm

if grep $build_machine /var/lib/jenkins/.ssh/config
then
	echo /var/lib/jenkins/.ssh/config was patched already
else
	echo patching /var/lib/jenkins/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; /var/lib/jenkins/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine

echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1
KexAlgorithms ecdh-sha2-nistp256
KexAlgorithms ecdh-sha2-nistp384
KexAlgorithms ecdh-sha2-nistp521
KexAlgorithms diffie-hellman-group-exchange-sha256
KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host. connection check:
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable.
	sleep 10
    
done

echo done connection check.
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h

swapoff -a

umount /dev/mmcblk0p*
umount /sdcard/*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi
dpkg --configure -a</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
# waiting 20min for the bulding device to flash
echo &quot;Waiting for the build device ($build_machine) to flash and become ready!&quot;
#sleep 1500

for i in {0..1200..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is finally up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        sleep 10
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0
echo Updating kernel on $build_machine
#
#cat &lt;&lt;EOF &gt;&gt; /etc/apt/sources.list
#deb [arch=armhf] http://repos.rcn-ee.com/debian/ jessie main
#deb-src [arch=armhf] http://repos.rcn-ee.com/debian/ jessie main
#EOF

cd
wget http://repos.rcn-ee.net/ubuntu/conf/repos.rcn-ee.net.gpg.key --no-check-certificate
apt-key add repos.rcn-ee.net.gpg.key
rm repos.rcn-ee.net.gpg.key

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-get update 
dpkg --configure -a
apt-get install -y -q git

cd /opt/scripts/tools/
rm eMMC/init-eMMC-flasher-v3.sh
git pull

#	./update_kernel.sh --ti-rt-channel --lts-4_4
#       ./update_kernel.sh --kernel 4.4.24-ti-rt-r58
./update_kernel.sh --kernel 4.4.36-ti-rt-r72

sync 
shutdown -r 1
echo restart scheduled after a min
sleep 30
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>#	echo update sources# if not updated?
echo kernel is updated	
lsb_release -a
uname -a

apt-get update
dpkg --configure -a
apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* 
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb*
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* 
apt-get autoremove -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb* libts-0.0-0 libts-bin libts-dev
apt-get -y -q purge qt4-*
dpkg --configure -a

apt-get -y clean
apt-get -y autoremove
apt-get -y autoclean

dpkg --configure -a

apt-get upgrade -y -q
#sudo apt-get install -y -q linux-image-armmp
dpkg --configure -a
df -h

echo packages installation done

apt-key update
apt-get update 
dpkg --configure -a
apt-get install -y -q git
dpkg --configure -a
update-initramfs -u
touch /forcefsck

echo rebooting for changes to take effect.
sync
shutdown -r 1
echo a reboot is scheduled after a minute.
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo waiting for a restart
sleep 60
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>#!/bin/bash
apt-get update
apt-get -q -y install cpufrequtils
apt-get -q -y install unzip parted

sync

echo installing basic packages.
apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential
dpkg --configure -a
sync
sleep 30

if  g++ --version | grep 4.6
then
apt-key update
apt-get update
apt-get -y upgrade
dpkg --configure -a
apt-get -y install g++-4.7
apt-get clean
apt-get autoclean
dpkg --configure -a
rm /usr/bin/gcc
rm /usr/bin/g++
ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi


echo installing QT
dpkg --configure -a
if apt-get install -y -q qt5-default cmake
then
   echo QT 5 found and installed
else
   wget https://cmake.org/files/v3.6/cmake-3.6.1.tar.gz
   tar xfv cmake-3.6.1.tar.gz
   cd cmake-3.6.1
   ./bootstrap
   make
   make install
   cd ..
   rm -r cmake-3.6.1*
 
  cd
  wget &quot;https://chaibio.box.com/shared/static/t39tu2duoszaut0rfq0dj33k77j91w0r.zip&quot;
  unzip -o t39tu2duoszaut0rfq0dj33k77j91w0r.zip

  cp ./QtEmbedded/lib/* /usr/lib/
  mkdir -p /opt/QtEmbedded/lib/fonts
  cp QtEmbedded/lib/fonts/* /opt/QtEmbedded/lib/fonts
  rm -rf ./QtEmbedded
  rm t39tu2duoszaut0rfq0dj33k77j91w0r.zip
  apt-get -q -y install qt4-qmake
fi

df -h

echo Installing mysql
dpkg --configure -a

sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server-5.5 mysql-server/root_password password &apos;&apos;&quot;
sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server-5.5 mysql-server/root_password_again password &apos;&apos;&quot;

sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server mysql-server/root_password password &apos;&apos;&quot;
sudo debconf-set-selections &lt;&lt;&lt; &quot;mysql-server mysql-server/root_password_again password &apos;&apos;&quot;

echo Installing mysql server package
export DEBIAN_FRONTEND=noninteractive
sudo -E apt-get install -y -q --allow-unauthenticated mysql-server

echo Installing mysql client package
sudo -E apt-get install -y -q --allow-unauthenticated libmysqlclient-dev
echo done installing mysql
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Update Software
apt-key update
apt-get update

apt-get -y -q install lsb-release
sync
sleep 30

dpkg --configure -a
sync
apt-get -q -y install cpufrequtils
apt-get -q -y install unzip

dpkg --configure -a

echo &quot;FSCKFIX=yes&quot; &gt;&gt; /etc/default/rcS
cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
if $low_performance
then
    cpufreq-set -f 300MHz 
    cpufreq-set -g conservative --max 300MHz
fi

apt-get -y -q install nodejs ruby ruby-dev 
sync
sleep 30
dpkg --configure -a

apt-get -y -q install libxslt-dev libxml2-dev 
sync
sleep 30
dpkg --configure -a

apt-get -y -q install libtool
dpkg --configure -a
sync
sleep 30

DEBIAN_FRONTEND=noninteractive apt-get -y -q install nginx-full 
DEBIAN_FRONTEND=noninteractive dpkg --configure -a
sync
sleep 30

echo installing headers...
apt-get -y -q install linux-headers-`uname -r`
sync
sleep 30
dpkg --configure -a

echo &quot;Build SOCI (or get its libs from repo)&quot;
cd ~

#http://downloads.sourceforge.net/project/soci/soci/soci-3.2.2/soci-3.2.2.tar.gz?r=&amp;ts=1481630635&amp;use_mirror=netix
wget &quot;http://downloads.sourceforge.net/project/soci/soci/soci-3.2.2/soci-3.2.2.tar.gz&quot;
tar xpvzf soci-3.2.2.tar.gz
dpkg --configure -a
cd soci-3.2.2
cmake -DCMAKE_BUILD_TYPE=Release -DSOCI_STATIC=OFF -DSOCI_TESTS=OFF -DWITH_SQLITE3=OFF -DSOCI_EMPTY=OFF -DWITH_MYSQL=ON -G &quot;Unix Makefiles&quot;
make
make install
cd ..
rm -rf soci-3.2.2*
dpkg --configure -a



exit 0
#libpoco-dev can apt-get poco; but guess an old version 1.3?

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
sleep 60
echo waiting for a restart
for i in {0..300..60}
do
	echo &quot;Waiting for the build device to become ready! $i&quot;
	sleep 60
    if ping $build_machine -c 1
    then
    	echo device is finally up !!
        sleep 30
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo arranging to build julia and different libs
cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
if $low_performance
then
    cpufreq-set -f 300MHz 
    cpufreq-set -g conservative --max 300MHz
fi

sync

df -h
ntpdate -b -s -u pool.ntp.org

sudo apt-get -q -y install libblas3gf liblapack3gf libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gcc-4.8 g++-4.8 gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev cpufrequtils libc-bin
apt-get -f -y -q install

apt-get install -q -y libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8
apt-get -f -y -q install

sudo apt-get -q -y install libblas3gf liblapack3gf libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gcc-4.8 g++-4.8 gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas-common libblas3 libfftw3-double3 libfftw3-single3 libgfortran3 liblapack3 libllvm3.8 libmetis5 libopenblas-base libunwind8 liblapack-dev liblapack3 libopenblas-base libopenblas-dev
apt-get -f -y -q install

apt-get -y -q install i2c-tools evtest git automake libtool 
apt-get -y -q install device-tree-compiler
apt-get -f -y -q install

sync
sync
 fsck /dev/mmcblk1p1 -y -f

exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Setup MySQL
systemctl stop mysql.service
mv /var/lib/mysql /data/
sed -i &quot;s,datadir.*=.*,datadir=/data/mysql,g&quot; /etc/mysql/my.cnf # Edit /etc/mysql/my.cnf and change datadir to /data/mysql
systemctl start mysql.service

sync

# the latest version sofar.. however, lets stay as we are for now.
#echo build latest stable poco 1.7.6
#cd
#wget --no-check-certificate &quot;https://pocoproject.org/releases/poco-1.7.6/poco-1.7.6.tar.gz&quot;
#tar xpvzf poco-1.7.6.tar.gz
#cd poco-1.7.6
#./configure
#make
#make install
#cd
#rm -rf poco-1.7.6* poco-1.7.6.tar.gz

wget &quot;http://pocoproject.org/releases/poco-1.6.1/poco-1.6.1.tar.gz&quot;
tar xpvzf poco-1.6.1.tar.gz
cd poco-1.6.1
./configure
make
make install
cd ..
rm -rf poco-1.6.1* poco-1.6.1.tar.gz

sync
fsck /dev/mmcblk1p1 -y -f

exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>
exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo cleanup without envs

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DEBIAN_FRONTEND=noninteractive apt-get install -q -y gfortran ntpdate
ntpdate -b -s -u pool.ntp.org

cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
if $low_performance
then
    cpufreq-set -f 300MHz 
    cpufreq-set -g conservative --max 300MHz
fi

sync

apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb*

echo cleanup with envs
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DEBIAN_FRONTEND=noninteractive apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb*


apt-get clean
apt-get autoclean

apt-get -q -y autoremove

# tslib
#??sudo apt-get install -y tslib libts-bin
echo building tslib
cd

echo installing with envs..
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DEBIAN_FRONTEND=noninteractive apt-get -y -q install i2c-tools evtest git automake libtool
echo with no envs
apt-get -y -q install i2c-tools evtest git automake libtool

git clone git://github.com/kergoth/tslib.git
cd tslib
cat &gt;&gt; /usr/include/linux/input.h &lt;&lt; __EOF__
#undef ABS_MAX
#undef ABS_CNT
#define ABS_MT_TOOL_X           0x3c    /* Center X tool position */
#define ABS_MT_TOOL_Y           0x3d    /* Center Y tool position */
#define ABS_MAX                 0x3f
#define ABS_CNT                 (ABS_MAX+1)
__EOF__


echo autoget tslib
./autogen.sh
echo configure tslib
./configure
echo making tslib
make
make install
cd
rm -r tslib

sync

echo Set environment variables 
cat &gt; ~/.profile &lt;&lt; EOL
    export SLOTS=/sys/devices/bone_capemgr.9/slots
    export PINS=/sys/kernel/debug/pinctrl/44e10800.pinmux/pins
    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
    export TSLIB_TSEVENTTYPE=INPUT
    export TSLIB_CONSOLEDEVICE=none
    export TSLIB_FBDEVICE=/dev/fb0
    export TSLIB_CALIBFILE=/etc/pointercal
    export TSLIB_CONFFILE=/etc/ts.conf
    export TSLIB_PLUGINDIR=/usr/local/lib/ts
    export TSLIB_TSDEVICE=/dev/input/event1
    export POINTERCAL_FILE=/etc/pointercal
    export QWS_MOUSE_PROTO=tslib:/dev/input/event1
EOL
source ~/.profile

# Calibrate Touchscreen
cp /usr/local/etc/ts.conf /etc/
# maybe we can perform calibration on first use

#Edit /etc/ts.conf to uncomment the second line:
sed -i &apos;s/#module_raw input/module_raw input/&apos; /etc/ts.conf

#Run ts_configure and press crosshairs on LCD.. maybe on first run

echo check ldconfig
which ldconfig

echo patching /etc/ld.so.conf
echo &quot;/usr/local/lib&quot; &gt;&gt; /etc/ld.so.conf
ldconfig

echo Installing R

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 06F90DE5381BA480
echo deb http://cran.cnr.berkeley.edu/bin/linux/debian jessie-cran3/ &gt;&gt; /etc/apt/sources.list

apt-key update
apt-get update
apt-get -y -q upgrade

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DEBIAN_FRONTEND=noninteractive apt-get install -q -y gfortran ntpdate

if false
then

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DEBIAN_FRONTEND=noninteractive apt-get install -q -y r-cran-rserve r-cran-rmysql r-cran-dbi r-cran-stringr r-cran-robustbase
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin DEBIAN_FRONTEND=noninteractive apt-get install -q -y r-cran-deoptimr

if apt-get install -q -y r-cran-rserve r-cran-rmysql r-cran-dbi r-cran-stringr r-cran-robustbase
then
   echo R installed successfully
else
   echo R was not able to install.
   exit 1
fi

ln -s /usr/bin/R /usr/local/bin/R
else
wget --no-check-certificate https://cran.r-project.org/src/base/R-3/R-3.2.3.tar.gz
tar xpvzf R-3.2.3.tar.gz
cd R-3.2.3
./configure --with-readline=no --with-x=no --enable-R-shlib --disable-java
if make
then 
  echo R compiled successfully.
else
  echo Error compiling R language.
  exit 1
fi

make install
cd ..
rm -rf R-3.2.3 R-3.2.3.tar.gz

wget --no-check-certificate https://rforge.net/Rserve/snapshot/Rserve_1.8-4.tar.gz
R CMD INSTALL Rserve_1.8-4.tar.gz
rm Rserve_1.8-4.tar.gz

wget --no-check-certificate https://cran.r-project.org/src/contrib/00Archive/DBI/DBI_0.3.1.tar.gz
R CMD INSTALL DBI_0.3.1.tar.gz 
rm DBI_0.3.1.tar.gz 

wget --no-check-certificate https://cran.r-project.org/src/contrib/00Archive/RMySQL/RMySQL_0.10.7.tar.gz
R CMD INSTALL RMySQL_0.10.7.tar.gz
rm RMySQL_0.10.7.tar.gz

fi

wget --no-check-certificate https://cran.r-project.org/src/contrib/00Archive/DEoptimR/DEoptimR_1.0-6.tar.gz
R CMD INSTALL DEoptimR_1.0-6.tar.gz
rm DEoptimR_1.0-6.tar.gz

wget --no-check-certificate https://cran.r-project.org/src/contrib/00Archive/Rcpp/Rcpp_0.12.2.tar.gz
R CMD INSTALL Rcpp_0.12.2.tar.gz
rm Rcpp_0.12.2.tar.gz

wget --no-check-certificate https://cran.r-project.org/src/contrib/00Archive/plyr/plyr_1.8.3.tar.gz
R CMD INSTALL plyr_1.8.3.tar.gz
rm plyr_1.8.3.tar.gz

wget https://cran.r-project.org/src/contrib/00Archive/stringi/stringi_1.0-1.tar.gz --no-check-certificate
R CMD INSTALL stringi_1.0-1.tar.gz
rm stringi_1.0-1.tar.gz

if ! wget https://cran.fhcrc.org/src/contrib/magrittr_1.5.tar.gz --no-check-certificate
then
	wget https://cran.fhcrc.org/src/contrib/00Archive/magrittr/magrittr_1.5.tar.gz --no-check-certificate
fi
R CMD INSTALL magrittr_1.5.tar.gz
rm magrittr_1.5.tar.gz

#if ! wget https://cran.r-project.org/src/contrib/reshape2_1.4.1.tar.gz --no-check-certificate
#then
	wget https://cran.r-project.org/src/contrib/00Archive/reshape2/reshape2_1.4.1.tar.gz --no-check-certificate
#fi
R CMD INSTALL reshape2_1.4.1.tar.gz
rm reshape2_1.4.1.tar.gz

#if ! wget https://cran.r-project.org/src/contrib/minpack.lm_1.2-0.tar.gz --no-check-certificate
#then
	wget https://cran.r-project.org/src/contrib/00Archive/minpack.lm/minpack.lm_1.2-0.tar.gz --no-check-certificate
#fi
R CMD INSTALL minpack.lm_1.2-0.tar.gz
rm minpack.lm_1.2-0.tar.gz

wget https://cran.r-project.org/src/contrib/00Archive/jsonlite/jsonlite_0.9.19.tar.gz --no-check-certificate
R CMD INSTALL jsonlite_0.9.19.tar.gz
rm jsonlite_0.9.19.tar.gz


exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo downloading and installing Julia
cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
if $low_performance
then
    cpufreq-set -f 300MHz 
    cpufreq-set -g conservative --max 300MHz
fi

sync

#pufreq-set --governor ondemand 
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

# add gfortran link to search path. 
ln -s /usr/lib/gcc/arm-linux-gnueabihf/4.9/libgfortran.so /usr/lib/libgfortran.so

cd
echo unmounting any sdcard folders
umount /sdcard/*
umount /dev/mmcblk0p*

LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__

partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/upgrade
if mount /dev/mmcblk0p1 /sdcard/upgrade/
then
    echo &quot;temp sdcard folder mounted&quot;
else
   echo &quot;Error mounting temp sdcard folder&quot;
   exit 1
fi

# creating a temporary swap file on sdcard
if fallocate -l 1G /sdcard/upgrade/swapfile #or dd if=/dev/zero of=/sdcard/upgrade/swapfile bs=10M count=300
then
    echo &quot;swap file created successfully&quot;
else
   echo &quot;failed creating swap file&quot;
   exit 1
fi
sudo chmod 600 /sdcard/upgrade/swapfile
sudo mkswap /sdcard/upgrade/swapfile
sudo swapon /sdcard/upgrade/swapfile

#verifying swap file is successfully added
sudo swapon -s

free -m

sync
apt-get -q -y install libblas3gf liblapack3gf libfftw3-dev libgmp3-dev libmpfr-dev libblas-dev liblapack-dev gfortran libgfortran3 m4 libedit-dev parted git ntp build-essential hdf5-tools curl python pkg-config libssl-dev libarpack2 libblas3 libgfortran3 liblapack3

if $bypass_julia
then
       echo Bypassing JULIA
       exit 0
fi

mkdir -p ~/julia-compile
cd ~/julia-compile
wget $download_prefex/julia05-44-slim-default.tgz

sync

echo installing julia
if tar xf julia05-44-slim-default.tgz -C / julia/usr --strip-components=1 
then
    echo &quot;extracted julia usr files&quot;
else
   echo &quot;Error extracting julia&quot;
   exit 1
fi

sync

#if tar xf julia05-44-slim-default.tgz -C ~ .julia
#then
#    echo &quot;extracted .julia folder&quot;
#    echo updating .cache link
#    cd ~/.julia/v0.5
#    rm .cache
#    ln -s ~/.julia/.cache .cache
#    cd sdcard/upgrade/julia-compile
#else
#    echo &quot;Error extracting julia&quot;
#    exit 1
#fi

#tar xf julia05-44-slim-default.tgz -C / julia/usr/etc --strip-components=2

echo &quot;export JULIA_PKGDIR=/root/.julia&quot;&gt;&gt;~/.profile
source ~/.profile
sync
sleep 60
if [ -e /usr/share/julia/bin/julia ] &amp;&amp; [ ! -e /usr/bin/julia ]
then
	ln -sf /usr/share/julia/bin/julia /usr/bin/julia
fi




#============== test
echo test finished. cleaning..
sync
cd
rm -r ~/julia-compile
sync
sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f

sync

sleep 60
echo &quot;Setting up Julia: Initializing rep&quot;
julia --print &quot;Pkg.init()&quot;
sync
sleep 60
echo &quot;Setting up Julia: Updating rep&quot;
julia --print &quot;Pkg.update()&quot;
sync
sleep 60
echo precompiling mandatory packages.
cat &lt;&lt;EOF &gt;&gt; chaibio_packages.jl

println(&quot;Setting up Julia: Adding packages&quot;)
Pkg.add(&quot;Dierckx&quot;)
Pkg.add(&quot;JSON&quot;)
Pkg.add(&quot;MySQL&quot;)
Pkg.add(&quot;JLD&quot;)
Pkg.add(&quot;DataFrames&quot;)
Pkg.add(&quot;Ipopt&quot;)
Pkg.add(&quot;JuMP&quot;)
Pkg.add(&quot;NLopt&quot;)
Pkg.add(&quot;HttpServer&quot;)

println(&quot;Setting up Julia: Building packages&quot;)
Pkg.resolve()

println(&quot;Setting up Julia: Precompiling packages&quot;)
using DataFrames, DataStructures, Dierckx, Ipopt, JLD, JSON, JuMP, MySQL, NLopt, HttpServer

println(&quot;Setting up Julia: Testing packages&quot;)
Pkg.test(&quot;Dierckx&quot;)
Pkg.test(&quot;JSON&quot;)
Pkg.test(&quot;MySQL&quot;)
Pkg.test(&quot;JLD&quot;)
Pkg.test(&quot;DataFrames&quot;)
Pkg.test(&quot;Ipopt&quot;)
Pkg.test(&quot;JuMP&quot;)
Pkg.test(&quot;NLopt&quot;)
Pkg.test(&quot;HttpServer&quot;)

println(&quot;Setting up Julia: done testing.. quitting..&quot;)
quit()
EOF
sync
sleep 60

# leave julia staff to be able to test why it crashes the system
julia chaibio_packages.jl
rm chaibio_packages.jl
julia --print &apos;Pkg.build(&quot;HDF5&quot;)&apos;
julia --print &apos;Pkg.build(&quot;HDF5&quot;)&apos;
julia --print &apos;Pkg.build(&quot;HDF5&quot;)&apos;
julia --print &apos;Pkg.build(&quot;HDF5&quot;)&apos;

echo test finished. cleaning..
sync
cd
rm -r ~/julia-compile
sync
sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f

exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>if $bypass_julia
then
       echo Bypassing JULIA check
       exit 0
fi

echo checking julia installation
which julia
julia --version

exit 0




</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>#echo cleaning julia build
#cd /sdcard/upgrade
#rm -r julia-compile
#sync

echo Disable Services
systemctl disable cloud9.service
systemctl disable bonescript.service
systemctl disable bonescript.socket
systemctl disable bonescript-autorun.service
rm /etc/systemd/system/sockets.target.wants/cloud9.socket

echo ifup script fix
echo &quot;Due to a bug (https://bugs.launchpad.net/ubuntu/+source/ntp/+bug/1206164) a script from ifup has to be fixed&quot;
sed -i &apos;s/) \&amp;/) &lt;\/dev\/null &gt;\/dev\/null 2&gt;\&amp;1 \&amp;/g&apos; /etc/network/if-up.d/ntpdate

#apt-get autoremove -q -y --purge xserver* apache* gnome* libopencv* desktop* hicolor* xscreensaver* xrdp* xorg* x11-common xdg-utils xkb-data libx11* libxcb*

apt-get clean
apt-get autoclean

apt-get -q -y autoremove
sync
sync
fsck /dev/mmcblk1p1 -y -f
fsck /dev/mmcblk0p1 -y -f

exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Install Ruby Packages

cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
if $low_performance
then
    cpufreq-set -f 300MHz 
    cpufreq-set -g conservative --max 300MHz
fi

#apt-get install -y -q ruby ruby-dev libxslt-dev libxml2-dev #Needed for Nokogiri
gem install bundle
#apt-get -q -y install nodejs 
#gem install nodejs
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Build gems with native extensions
bundle config build.atomic --use-system-libraries
bundle config build.json --use-system-libraries
bundle config build.sqlite3 --use-system-libraries
bundle config build.nokogiri --use-system-libraries
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Remote Support Access
sync
echo &quot;temp\ntemp\nAny name\n\n\n\n\n\n&quot; | adduser service # any pw will do, will delete it below

echo setting up service user
adduser service sudo
mkdir /root/.ngrok2
mkdir /home/service/.ssh
chown service /home/service/.ssh
chgrp service /home/service/.ssh
cd

cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
if $low_performance
then
    cpufreq-set -f 300MHz 
    cpufreq-set -g conservative --max 300MHz
fi

sync

#wget https://dl.ngrok.com/ngrok_2.0.19_linux_arm.zip --no-check-certificate
wget $download_prefex/ngrok_2.0.19_linux_arm.zip  --no-check-certificate
unzip -o ngrok_2.0.19_linux_arm.zip
rm ngrok_2.0.19_linux_arm.zip
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo removing service user password
#Edit /etc/shadow, remove password for service by setting pw to *
passwd service -d
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo installing boost
sync
apt-get -q -y -f install 
apt-get -q -y install libboost-all-dev
apt-get -q -y -f install 
apt-get -q -y install libboost-all-dev

exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo zeroing

dd if=/dev/zero of=/zeros.bigfile bs=16M
sync
rm /zeros.bigfile
sync
mkdir -p /tmp/zeroer
if mount /dev/mmcblk1p2 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi

if mount /dev/mmcblk1p3 /tmp/zeroer
then
    dd if=/dev/zero of=/tmp/zeroer/zeros.bigfile bs=16M
    sync
    rm /tmp/zeroer/zeros.bigfile
    sync
    umount /tmp/zeroer
fi

echo basic beaglebone setup done!</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#build( &quot;create_factory_settings_sdcard&quot;, build_machine:&quot;$build_machine&quot;, output_sdcard:&quot;/dev/sdb&quot;)
echo all 3rd party software done for $build_machine, you can call call deploy_chibio job to add chibio software now.

exit 0</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
  </buildWrappers>
</project>