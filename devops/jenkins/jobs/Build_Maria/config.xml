<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Building mariadb and upload it to download server</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>build_machine</name>
          <description>Remote build beaglebone.</description>
          <defaultValue>10.0.2.240</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>download_prefex</name>
          <description>Download server url</description>
          <defaultValue>http://10.0.1.20/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>local_download_folder</name>
          <description>The folder where to host download file. Could be /usr/share/nginx/html/download or /usr/share/nginx/html/download
</description>
          <defaultValue>/usr/share/nginx/html/download</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>low_performance</name>
          <description>Reduce cpu performance for a better stability.
</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
echo checking Jenkins server
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
echo user: $(whoami)

if grep $build_machine ~/.ssh/config
then
	echo ~/.ssh/config was patched already
else
	echo patching ~/.ssh/config
	cat &lt;&lt;EOF &gt;&gt; ~/.ssh/config
Host $build_machine
		KexAlgorithms +diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
		Ciphers +3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#		KexAlgorithms +diffie-hellman-group1-sha1
#        KexAlgorithms +curve25519-sha256@libssh.org
#        KexAlgorithms +ecdh-sha2-nistp256
#        KexAlgorithms +ecdh-sha2-nistp384
#        KexAlgorithms +ecdh-sha2-nistp521
#        KexAlgorithms +diffie-hellman-group-exchange-sha256
#        KexAlgorithms +diffie-hellman-group14-sha1
EOF
fi

#if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
#then
#	echo sshd_config was patched already
#else
#	echo patching sshd_config
#	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
#KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
#EOF
#	sudo service sshd restart
#fi

ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
echo deleting root password in case of chaipcr
sshpass -p chaipcr ssh -oStrictHostKeyChecking=no root@$build_machine &quot;passwd -d -u root&quot;

ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;

if grep diffie-hellman-group1-sha1 /etc/ssh/sshd_config
then
	echo sshd_config on $build_machine was patched already
else
	echo patching sshd_config
	cat &lt;&lt;EOF &gt;&gt; /etc/ssh/sshd_config
KexAlgorithms diffie-hellman-group1-sha1
KexAlgorithms ecdh-sha2-nistp256
KexAlgorithms ecdh-sha2-nistp384
KexAlgorithms ecdh-sha2-nistp521
KexAlgorithms diffie-hellman-group-exchange-sha256
KexAlgorithms diffie-hellman-group14-sha1
#Ciphers 3des-cbc,blowfish-cbc,aes128-cbc,aes128-ctr,aes256-ctr
EOF
	sudo service sshd restart
    sudo service ssh restart
    /etc/init.d/ssh restart
	echo $build_machine patched
    ifconfig
fi

exit 0
ENDSSH

echo returned to host.
counter=0
until ssh -t root@$build_machine &apos;exit 0&apos;
do
	counter=$(( $counter + 1 ))
    if [ $counter -gt 10 ]
    then
    	echo Beaglebone is not available.
    	exit 1
    fi
	echo waiting for beaglebone to become connectable- $build_machine.
	sleep 20
    
done

ssh -t root@$build_machine &apos;lsblk; exit 0&apos;

echo done connection check.</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo &quot;Building ${PROJECT_NAME} - Build # ${BUILD_NUMBER}.. result is at ${BUILD_URL}&quot;
echo &quot;Slave Beaglebone at ${build_machine}&quot;
echo checking build device 
echo &quot;Bash version ${BASH_VERSION}...&quot;
uname -a
ls -ahl
lsblk
df -h
dpkg --configure -a
swapoff -a
umount /dev/mmcblk0p*

lsblk
if mount | grep mmcblk0
then
  echo &quot;Error: can&apos;t unmount sdcard!&quot;
  exit 1
fi

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command># download flasher image
#wget https://rcn-ee.com/rootfs/bb.org/testing/2016-10-09/console/BBB-blank-debian-8.6-console-armhf-2016-10-09-2gb.img.xz

swapoff -a
mount -o remount,rw /

echo installing missing packages.

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9D6D8F6BC857C906
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 7638D0442B90D010

apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1655A0AB68576280
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D284E608A4C46402
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CF979FFA3D3D3ACC

apt-get update
apt-get install xz-utils parted cpufrequtils git -y -q

#no reformating
exit 0

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>exit 0

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
#echo Waiting for the device to come up again
#sleep 90#

#echo waiting 30min for the building device to flash
#sleep 1800

for i in {0..1800..60}
do
	echo &quot;Waiting for the build device ($build_machine) to become ready! $i&quot;
	sleep 60

	if ping $build_machine -c 2
    then
    	echo device is  up !!
        sleep 60
        
		ssh-keygen -f &quot;/var/lib/jenkins/.ssh/known_hosts&quot; -R $build_machine
		ssh -t -oStrictHostKeyChecking=no root@$build_machine &lt;&lt;&apos;ENDSSH&apos;
		echo $build_machine device is connectable.. 
		lsblk
		exit 0
ENDSSH

		sleep 10
		echo returned to host. connection check:
		counter=0
		until ssh -t root@$build_machine &apos;exit 0&apos;
		do
			counter=$(( $counter + 1 ))
    		if [ $counter -gt 20 ]
    		then
    			echo Beaglebone is not available.
    			exit 1
		    fi
			echo waiting for ssh on beaglebone to become connectable.
			sleep 10
		done
		echo ssh is connectable.
        exit 0
    fi
done

echo timeout waiting for the device to become ready!
exit 1</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo Starting building Maria on $build_machine
apt-get update
apt-get -y -q upgrade

apt-get -f -y -q install

exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>exit 0
</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo arranging to build mariadb
df -h

apt-get -q -y install gcc g++

if g++ --version | grep &quot;4.9&quot;
then
echo new g++ version is installed

else

if ! apt-get -q -y install gcc g++
then
    echo error downloading gcc 4.8.. trying 4.7
    apt-get -q -y install g++-4.7
if apt-get -q -y install gcc-4.7
then
  apt-get clean
  apt-get autoclean
  dpkg --configure -a
  rm /usr/bin/gcc
  rm /usr/bin/g++
  ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
  ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

fi
fi

apt-get -y -q install g++ ntp ntpdate git unzip automake sshpass build-essential
dpkg --configure -a
sync
sleep 5

if  g++ --version | grep 4.6
then
  apt-get update
  apt-get -y upgrade
  dpkg --configure -a
  apt-get -y install g++-4.7
  apt-get clean
  apt-get autoclean
  dpkg --configure -a
  rm /usr/bin/gcc
  rm /usr/bin/g++
  ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
  ln -s /usr/bin/g++-4.7 /usr/bin/g++
fi

if  g++ --version | grep 4.6
then
   echo &quot;Can&apos;t update g++&quot;
   exit 1
fi

echo arranging the sdcard

swapoff -a || :
umount /sdcard/*  || :
umount /dev/mmcblk0p*  || :

ln -sf /usr/bin/ld /usr/bin/ld.gold
echo 1500 &gt; /proc/sys/kernel/hung_task_timeout_secs

LC_ALL=C sfdisk --force -uS --Linux /dev/mmcblk0 &lt;&lt;-__EOF__
,,0xe,*
__EOF__

partprobe /dev/mmcblk0
mkfs.ext4 /dev/mmcblk0p1 -F
mkdir -p /sdcard/upgrade  || :
mount /dev/mmcblk0p1 /sdcard/upgrade/ 

# creating a temporary swap file on sdcard
sudo fallocate -l 3G /sdcard/upgrade/swapfile #or dd if=/dev/zero of=/sdcard/upgrade/swapfile bs=10M count=300
sudo chmod 600 /sdcard/upgrade/swapfile
sudo mkswap /sdcard/upgrade/swapfile
sudo swapon /sdcard/upgrade/swapfile
#verifying swap file is successfully added
sudo swapon -s

free -m

cmake_version=$(cmake --version | sed -n &apos;s/^cmake version \([0-9]*\.[0-9]*\)\..*$/\1/p&apos;)
echo CMake version is $cmake_version
check=$(echo &quot;3.1&gt;$cmake_version&quot; | bc -l)
echo version check result $check

if [ $check -eq 1 ]
then
   echo old cmake found and installing 3.6 now..
   echo Building CMake
   cd /sdcard/upgrade
   wget https://cmake.org/files/v3.6/cmake-3.6.1.tar.gz
   tar xfv cmake-3.6.1.tar.gz
   cd cmake-3.6.1
   ./bootstrap
   make
   make install
   cd ..
   rm -r cmake-3.6.1*
fi 

apt-get -y -q install lsb-release clang
apt-get install bison -y
apt-get install libcurl4-openssl-dev -y
apt-get install libncurses5-dev -y

sync
sleep 30
dpkg --configure -a

apt-get autoremove -y -q

apt-get -q -y install parted git build-essential curl python pkg-config libssl-dev ntp ntpdate git unzip automake sshpass linux-headers-`uname -r`

apt-get -f -y -q install

cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor

if $low_performance
then
   echo GOVERNOR=\&quot;conservative\&quot; &gt;&gt; /etc/default/cpufrequtils
   cpufreq-set -f 300MHz -g conservative
   cpufreq-set -g conservative --max 300MHz
fi

exit 0</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo building mariadb

# add gfortran link to search path. 

# compiling madiadb 10

rm -r /sdcard/upgrade/maria || :

mkdir -p /sdcard/upgrade/maria
cd /sdcard/upgrade/maria

apt-get install libncurses5-dev clang -q -y

# remove mysql
sudo apt-get -y -q remove --purge mysql-server mysql-client mysql-common
sudo apt-get -y -q autoremove
sudo apt-get -y -q autoclean

wget $download_prefex/mariadb-10.0.16.tar.gz -O mariadb-10.0.16.tar.gz
tar xfv mariadb-10.0.16.tar.gz
cd mariadb-10.0.16

mkdir -p /data/mysql  || :

groupadd -g 40 mysql
useradd -c &quot;MySQL Server&quot; -d /data/mysql -g mysql -s /bin/false -u 40 mysql

cmake -DCMAKE_BUILD_TYPE=Release                       \
      -DCMAKE_INSTALL_PREFIX=/usr                      \
      -DINSTALL_MANDIR=share/man                       \
      -DINSTALL_MYSQLSHAREDIR=share/mysql              \
      -DINSTALL_MYSQLTESTDIR=share/mysql/test          \
      -DINSTALL_PLUGINDIR=lib/mysql/plugin             \
      -DINSTALL_SBINDIR=sbin                           \
      -DINSTALL_SCRIPTDIR=bin                          \
      -DINSTALL_SQLBENCHDIR=share/mysql/bench          \
      -DINSTALL_SUPPORTFILESDIR=share/mysql            \
      -DMYSQL_DATADIR=/data/mysql                      \
      -DMYSQL_UNIX_ADDR=/run/mysqld/mysqld.sock        \
      -DWITH_EXTRA_CHARSETS=complex                    \
      -DWITH_EMBEDDED_SERVER=ON                        \
      -DWITHOUT_MROONGA_STORAGE_ENGINE=1               \
      -DTOKUDB_OK=0                                   \
      -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
      .
    
make

</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>cd /sdcard/upgrade/maria/mariadb-10.0.16
make install
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>cd /sdcard/upgrade/maria/mariadb-10.0.16

install -v -dm 755 /etc/mysql
cat &gt; /etc/mysql/my.cnf &lt;&lt; &quot;EOF&quot;
# Begin /etc/mysql/my.cnf

# The following options will be passed to all MySQL clients
[client]
#password       = your_password
port            = 3306
socket          = /run/mysqld/mysqld.sock

# The MySQL server
[mysqld]
port            = 3306
socket          = /run/mysqld/mysqld.sock
datadir         = /data/mysql
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
sort_buffer_size = 512K
net_buffer_length = 16K
myisam_sort_buffer_size = 8M

# Don&apos;t listen on a TCP/IP port at all.
skip-networking

# required unique id between 1 and 2^32 - 1
server-id       = 1

# Uncomment the following if you are using BDB tables
#bdb_cache_size = 4M
#bdb_max_lock = 10000

# InnoDB tables are now used by default
innodb_data_home_dir = /data/mysql
innodb_data_file_path = ibdata1:10M:autoextend
innodb_log_group_home_dir = /data/mysql
# You can set .._buffer_pool_size up to 50 - 80 %
# of RAM but beware of setting memory usage too high
innodb_buffer_pool_size = 16M
innodb_additional_mem_pool_size = 2M
# Set .._log_file_size to 25 % of buffer pool size
innodb_log_file_size = 5M
innodb_log_buffer_size = 8M
innodb_flush_log_at_trx_commit = 1
innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash
# Remove the next comment character if you are not familiar with SQL
#safe-updates

[isamchk]
key_buffer = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout

# End /etc/mysql/my.cnf
EOF

mysql_install_db --basedir=/usr --datadir=/data/mysql --user=mysql
chown -R mysql:mysql /data/mysql

install -v -m755 -o mysql -g mysql -d /run/mysqld
mysqld_safe --user=mysql 2&gt;&amp;1 &gt;/dev/null &amp;

cd /sdcard/upgrade/maria/
tar fcz mariadb-10.0.16-build.tar.gz mariadb-10.0.16

cd
sync</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo test finished. cleaning..
swapoff /sdcard/upgrade/swapfile
rm /sdcard/upgrade/swapfile
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
    <hudson.tasks.Shell>
      <command>echo uploading mariadb file to server

sudo rm $local_download_folder/mariadb-10.0.16-build.tar.gz
scp -oStrictHostKeyChecking=no -r root@$build_machine:/sdcard/upgrade/maria/mariadb-10.0.16-build.tar.gz $local_download_folder/
chmod 777 $local_download_folder/mariadb-10.0.16-build.tar.gz

</command>
    </hudson.tasks.Shell>
    <org.jvnet.hudson.plugins.SSHBuilder plugin="ssh@2.4">
      <siteName>root@$build_machine:22</siteName>
      <command>echo cleaning up
cd /sdcard/upgrade/maria/

ls -ahl

cd ..

rm -r maria
sync
ls -ahl

cpufreq-info
cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor

echo all done
exit 0
</command>
    </org.jvnet.hudson.plugins.SSHBuilder>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>